@startuml

skinparam classAttributeIconSize 0

title Facebook App -  Class Diagram

interface IXmlSerializable {
    +ReadXml(XmlReader reader): void
    +WriteXml(XmlWriter writer): void
}

class FormMain extends Form {
}

class UserPaths {
    +constructor(User i_User)
    +UserSettingsPath: string {getter}
    +PostFiltersPath: string {getter}
    +CannedPostsDirectory: string {getter}
}

FormMain "1" o-up- "1" UserPaths: Gets the paths for all\nthe persisted information\nfor the logged in user
FormMain "1" o-up- "1" User: Holds the currently\nlogged in user
FormMain "1" o-up- "*" Post
FormMain "1" o-up- "*" Event
FormMain "1" o-up- "*" Checkin

package "Post Filtering Feature" <<Frame>> {

    class PostFilterGroup implements IXmlSerializable{
        +Name: string
        +Enabled: bool
        +Priority: ePostPriority
        +PostFilters: IList<IPostFilter>
        +IsMatch(Post): bool
    }

    class FormFilterSettings extends Form {
        +PostFilterGroups : List<PostFilterGroup>
    }

    FormFilterSettings "1" *- "*" PostFilterGroup
    FormMain *- FormFilterSettings: Shown when [Filter Settings...]\nis clicked
    
    class FormAddNewGroup extends Form {
        +NewFilterGroup: PostFilterGroup
    }
    
    class FormEditFilterGroup extends Form {
        +FilterGroup: PostFilterGroup
    }
    
    FormFilterSettings - FormAddNewGroup: Shown when creating\na new filter group
    FormFilterSettings - FormEditFilterGroup: shown when editing\na filter group

    enum ePostPriority {
        Hidden
        Demoted
        Promoted
    }

    interface IPostFilter extends IXmlSerializable {
        +Enabled: bool
        +IsMatch(Post): bool
    }


    class RegexPostFilter implements IPostFilter {
        +Expression: Regex
    }

    PostFilterGroup - ePostPriority: priority to set the\npost when matched
    PostFilterGroup "1" *-- "*" IPostFilter: filters to use to\ndetermain if post applies\nto group
    FormMain "1" o- "*" PostFilterGroup: All the groups\nthat will be used\nfor filtering

}

package "Canned Post Feature" <<Frame>> {

    class FormSelectCannedPost extends Form {
        +SelectedPost: CannedPost
        +CannedPostsDirectoryPath: string
    }
    
    FormMain *- FormSelectCannedPost: Shown when [Canned Post...]\nis clicked
    
    class FormEditCannedPost extends Form {
        +CannedPost: CannedPost
    }
    
    class FormPostCannedPost extends Form {
        +CannedPost: CannedPost
        +CompiledPost: PostInfo
    }

    FormSelectCannedPost - FormEditCannedPost : Shown when a canned post\nis edited or created
    FormSelectCannedPost - FormPostCannedPost : Shown after a canned post\nis selected
    FormSelectCannedPost o- CannedPost
    FormEditCannedPost o- CannedPost
    FormPostCannedPost o- CannedPost

    class PostInfo {
        +StatusText: string
    }
    
    class CannedPost {
        +Name: string
        +StatusTextTemplate: Template
        +Categories: List<string>
        +GeneratePost(IEnumerable<KeyValuePair<string, string>> i_StatusTemplateReplacementPairs): PostInfo
    }

    class Template implements IXmlSerializable {
        {static} +Parse(string i_Input) Template
        +Name: string
        +Keys: IEnumerable<string>
        +Compile(IEnumerable<KeyValuePair<string, string>> i_ReplacementPairs): string
    }

    interface ITextNode {
        +Text: string {getter}
    }

    class StaticTextNode implements ITextNode {
        +Text: string {getter}
        +constructor(string i_Text)
    }

    class DynamicTextNode implements ITextNode {
        +Name: string {getter}
        +Text: string {getter, setter}
        +constructor(string i_Name, string i_Text)
    }

    Template "1" *-- "*" ITextNode: Template is composed of
    CannedPost "1" *-- "1" Template
    CannedPost - PostInfo : Compiles to
}

@enduml